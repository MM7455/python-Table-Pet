import sys
import os
import re
import requests
import random
import psutil
import win32gui
import pygetwindow as gw
from PyQt6.QtWidgets import QApplication, QWidget, QLabel, QMenu, QPushButton,QVBoxLayout,QLineEdit,QInputDialog, QMessageBox, QTextEdit
from PyQt6.QtGui import QPixmap, QPainter, QGuiApplication, QCursor
from PyQt6.QtCore import Qt, QPoint, QTimer, QThread, pyqtSignal

script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

QGuiApplication.setHighDpiScaleFactorRoundingPolicy(
    Qt.HighDpiScaleFactorRoundingPolicy.PassThrough
)

os.environ["DEEPSEEK_API_KEY"] = "api"
api_key = os.getenv("DEEPSEEK_API_KEY")

def load_images(folder):
    """ 从文件夹读取所有 PNG 图片，按文件名中的数字顺序排序 """
    files = sorted(
        [f for f in os.listdir(folder) if f.endswith(".png")], 
        key=lambda x: int(re.search(r'\d+', x).group())  # 提取文件名中的数字部分排序
    )
    return [QPixmap(os.path.join(folder, f)) for f in files]

from requests.exceptions import RequestException, HTTPError  # 新增这行

class DeepSeekAI:
    BASE_URL = "https://api.deepseek.com/v1" #存储API基础地址
    
    @staticmethod #验证环境变量是否设置
    def validate_key():
        if "DEEPSEEK_API_KEY" not in os.environ:
            raise RuntimeError("未检测到DEEPSEEK_API_KEY环境变量")

class AIWorker(QThread): #发送API请求
    """ 后台AI处理线程 """
    response_received = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    def __init__(self, prompt, mode="chat"):
        super().__init__()
        self.prompt = prompt
        self.mode = mode
        self.api_key = os.getenv("DEEPSEEK_API_KEY")
        self.last_window = ""
        self.timer = QTimer()
        self.worker = None
 
    def generate_response(self, window_title):
        """根据窗口标题生成 AI 吐槽"""
        url = "https://api.deepseek.com/v1/chat/completions"

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        prompt = f"""
                    用1-12个字反应当前用户正在使用的窗口【{window_title}】，不要解释直接输出
                    例如：当VS code 时：累死你算了😉
                    例如：当pornhub 时：记得锁门哦🔒
                    例如：当steam 时：作业写了吗🍉
                """
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "system", "content": prompt}],
            "temperature": 1
        }

        try:
            response = requests.post(url, headers=headers, json=data, timeout=10)
            response.raise_for_status()
            reply = response.json()["choices"][0]["message"]["content"]
            print(f"AI 回复: {reply}")
            self.response_received.emit(reply)  
        except Exception as e:
            print(f"AI请求失败: {e}")
            self.setText("盯着你呢👀")  # 失败时默认文本

    def handle_chat(self):
        """ 处理聊天模式 """
        try:
            response = requests.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "deepseek-chat",
                    "messages": [
                        {"role": "system", "content": "回答不需要解释，直接用简洁的短语骂用户"},
                        {"role": "user", "content": self.prompt}
                    ],
                    "temperature": 1,
                },
                timeout=15
            )
            
            response.raise_for_status()
            data = response.json()
            
            if "choices" not in data:
                raise ValueError("无效API响应结构")
            
            reply = data["choices"][0]["message"]["content"]
            print(f"🤖 AI 骂人模式回复: {reply}")  
            self.response_received.emit(reply.strip())  

        except Exception as e:
            print(f"❌ AI请求失败: {e}")
            self.response_received.emit("骂不动了😵‍💫")

    def run(self):
        print(f"🛠 线程启动, mode={self.mode}")
        if self.mode == "chat":
            self.handle_chat()
        elif self.mode == "window":
            self.generate_response(self.prompt)

        self.exec()

class ChatWindow(QWidget):
    """ 聊天窗口，显示 AI 回复并输入消息 """
    def __init__(self, pet):
        super().__init__()
        self.pet = pet  # 绑定桌宠
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)

        self.setFixedSize(250, 100)  # 固定窗口大小
        self.move(self.pet.x() + 100, self.pet.y() - 50)  # 默认在桌宠右上角

        self.chat_label = QLabel("", self)
        self.chat_label.setStyleSheet("background-color: white; border-radius: 5px; padding: 5px;")
        self.chat_label.setWordWrap(True)
        self.chat_label.setGeometry(10, 10, 230, 40)  # 聊天气泡区域

        self.roast_label = QLabel("", self)
        self.roast_label.setStyleSheet("background-color: white; border-radius: 5px; padding: 5px;")
        self.roast_label.setWordWrap(True)
        self.roast_label.setGeometry(10, 10, 230, 40)  # 聊天气泡区域

        self.input_box = QLineEdit(self)
        self.input_box.setPlaceholderText("和我聊天吧！")
        self.input_box.setGeometry(10, 60, 230, 30)
        self.input_box.returnPressed.connect(self.process_input)

        self.chat_timer = QTimer(self)
        self.chat_timer.setSingleShot(True)
        self.chat_timer.timeout.connect(self.chat_label.hide)  # 5秒后隐藏 chat_label

        self.roast_timer = QTimer(self)
        self.roast_timer.setSingleShot(True)
        self.roast_timer.timeout.connect(self.roast_label.hide)  # 3秒后隐藏 roast_label

        print("✅ 定时器初始化完成")

        self.worker = None
        self.last_window = None
        self.mode = "window"
        self.timer = QTimer()  # 让 QTimer 在主线程运行
        self.timer.timeout.connect(self.check_window)  
        self.timer.start(5000)
        self.hide()  # 初始隐藏

        self.start_window_monitor()

    @staticmethod #解决self类问题
    def get_active_window_title():
        hwnd = win32gui.GetForegroundWindow()  # 获取当前窗口的句柄
        if hwnd:
            window_title = win32gui.GetWindowText(hwnd)  # 获取窗口标题
            return window_title
        return None

    def start_window_monitor(self):
        """ 以定时方式持续检测窗口标题 """
        if self.worker and self.worker.isRunning():
            print("✅ 窗口监视已在运行...")
            return
        self.worker = AIWorker("", mode="window")
        self.get_ai_response("", mode="window")
        self.timer = QTimer()
        self.timer.timeout.connect(self.check_window)  # 每次定时器触发，检查窗口
        self.timer.start(2000)  # 每2秒检查一次窗口

    def check_window(self):
        window = gw.getActiveWindow()
        if window is None:
            print("❌ 没有检测到活跃窗口")
            return  # 直接返回，不继续执行   
        window_title = window.title
        print(f"🔍 检测当前窗口: {window_title}")
        print(f" 当前模式: {self.mode}")
        if not window_title:
            print("⚠️ 窗口标题为空！")
            return
    
        if window_title != self.last_window:  # 只有窗口变化时才触发
            self.last_window = window_title
            print(f"{window_title}")  # 打印窗口名称
            self.get_ai_response(window_title, mode="window")  

    def process_input(self): #ENTER后执行
        """ 处理用户输入并获取 AI 回复 """
        text = self.input_box.text().strip()
        if not text:  # 如果用户输入为空
           self.chat_label.setText("你说什么~")  # 给个提示
           return
         # 进入聊天模式，禁用吐槽
        
        self.input_box.hide()  # 隐藏输入框
        self.get_ai_response(text, mode="chat")
        # 判断当前模式，绑定不同的信号
        if self.mode == "chat":
            self.worker.response_received.connect(self.display_chat_response)
        elif self.mode == "window":
            self.worker.response_received.connect(self.display_roast_response)
        else:
            self.worker.response_received.connect(self.display_chat_response)  # 默认用聊天模式

        self.worker.error_occurred.connect(self.display_error)
        self.worker.finished.connect(self.reset_worker)
        self.worker.start()


    def get_ai_response(self, text, mode="chat"):
      
        print(f"🚀 请求 AI 响应: {text}, mode={mode}")
        self.worker = AIWorker(text, mode=mode)

        # 根据 mode 选择不同的信号处理方法
        if mode == "chat":
            self.worker.response_received.connect(self.display_chat_response)
            self.chat_label.setText("思考中...")  # 处理普通聊天
        elif mode == "window":
            self.worker.response_received.connect(self.display_roast_response)  # 处理吐槽

        self.worker.error_occurred.connect(self.display_error)  # 处理错误
        print("🔗 连接 AIWorker 信号到相应的 display 方法")

        self.worker.finished.connect(self.reset_worker)  # 线程结束后清理
        self.worker.start()

    def display_chat_response(self, reply):
        """ 处理正常聊天 """
        print(f"💬 聊天回复: {reply}")
        self.chat_label.setText(reply)
        self.chat_label.adjustSize()
        self.adjustPosition()
        self.chat_label.repaint()  # 强制 UI 立即重绘
        self.chat_label.update() 
        self.input_box.hide()
        self.chat_label.raise_()
        self.chat_timer.start(5000) 
        QTimer.singleShot(5000, self.reset_mode_to_window)

    def display_roast_response(self, reply):
        """ 处理吐槽 """
        if self.mode == "chat":
            print("🚫 聊天模式，忽略吐槽")
            return
        print(f"🔥 吐槽回复: {reply}")
        self.roast_label.setText(reply)
        self.roast_label.adjustSize()
        self.adjustPosition()
        self.roast_label.repaint()  # 强制 UI 立即重绘
        self.roast_label.update() 
        self.roast_label.window().show()
        self.roast_label.setVisible(True)  # 刷新 UI
        self.roast_label.show()
        self.chat_label.hide()
        self.input_box.hide()
        self.roast_label.raise_()
        self.roast_timer.start(3000) 

    def display_error(self, error_msg):
        """ 发生错误时显示 """
        self.chat_label.setText(error_msg)
        self.chat_label.adjustSize()
        self.adjustPosition()
        QTimer.singleShot(10000, self.chat_label.hide)

    
    def adjustPosition(self):
        """ 确保聊天框在桌宠旁边 """
        self.move(self.pet.x() + 100, self.pet.y())

    def reset_worker(self):
        self.worker = None

    def reset_mode_to_window(self):
        """ 5 秒后检查是否仍然处于聊天模式，避免被其他逻辑打断 """
        if not self.chat_label.isVisible():
            self.mode = "window"
            print("🔵 5 秒后自动切换模式: window") 

    def prepare_new_chat(self): 
        self.chat_label.hide()
        self.roast_label.hide()
        self.chat_label.setText("")
        self.input_box.clear()       # 清空输入框
        self.input_box.show()        # 确保输入框可见
        self.input_box.setFocus()
    
class DesktopPet(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)        
        # 加载 PNG 图片
        self.idle_frames = load_images("animations/idle")
        self.dance_frames = load_images("animations/dance")
        self.drag_frames = load_images("animations/drag")
        self.frames = self.idle_frames
        self.frame_idx = 0
        self.is_dragging = False

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_animation)
        self.timer.start(32)

        self.chat_window = ChatWindow(self)

        # **右键菜单**
        self.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.customContextMenuRequested.connect(self.on_context_menu_request)

    def update_animation(self):
        self.frame_idx = (self.frame_idx + 1) % len(self.frames)
        self.resize(self.frames[self.frame_idx].size())
        self.repaint()

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawPixmap(0, 0, self.frames[self.frame_idx])

    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            self.is_dragging = True
            self.switch_to_drag()
            event.accept()

    def mouseMoveEvent(self, event):
        if event.buttons() & Qt.MouseButton.LeftButton:
            self.move(event.globalPosition().toPoint() - self.drag_position)
            self.chat_window.adjustPosition()
            event.accept()

    def mouseReleaseEvent(self, event):
        if self.is_dragging:
            self.is_dragging = False
            self.restore_animation()
            event.accept()

    def switch_to_drag(self):
        if self.frames != self.drag_frames:
            self.frames = self.drag_frames
            self.frame_idx = 0
            self.timer.setInterval(32)

    def restore_animation(self):
        if self.frames == self.drag_frames:
            self.frames = self.idle_frames
            self.frame_idx = 0


    def on_context_menu_request(self, pos):
        """ 上下文菜单请求的正式处理 """
        self.chat_window.mode = "chat"
        print("🟢 进入聊天模式")
        menu = QMenu(self)
        chat_action = menu.addAction("聊天")
        dance_action = menu.addAction("跳舞")
        idle_action = menu.addAction("待机")
        quit_action = menu.addAction("退出")

        dance_action.triggered.connect(self.start_dance)
        chat_action.triggered.connect(self.toggle_chat)
        idle_action.triggered.connect(self.start_idle)
        quit_action.triggered.connect(self.safe_close)  # 修改关闭方式

        # 使用绝对坐标显示菜单
        menu.exec(self.mapToGlobal(pos))

        if not self.chat_window.isVisible():  # 只有聊天窗口没打开时，才改回 window
            self.chat_window.mode = "window"
            print("🔵 退出聊天模式，回到窗口监视")

    def toggle_chat(self):
        """ 切换聊天框显示/隐藏 """
        print("📢 触发了聊天按钮")
        self.chat_window.mode = "chat"
        print(f"9999 进入聊天模式, 当前模式: {self.chat_window.mode}")
        if self.chat_window.isVisible():
            self.chat_window.hide()
        else:
            self.chat_window.show()
            self.chat_window.adjustPosition()
            self.chat_window.prepare_new_chat()
        
    def start_dance(self):
        self.frames = self.dance_frames
        self.frame_idx = 0
        self.timer.setInterval(16)

    def start_idle(self):
        self.frames = self.idle_frames
        self.frame_idx = 0
        self.timer.setInterval(32)

    def safe_close(self):
        if self.timer.isActive():
            self.timer.stop()
        self.chat_window.close()
        self.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    pet = DesktopPet()
    pet.show()
    sys.exit(app.exec())
